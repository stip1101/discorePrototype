import { Client, GatewayIntentBits, Events, Collection } from 'discord.js';
import { config } from 'dotenv';
import { AnalysisService } from '../services/analysisService.js';
import { DatabaseService } from '../services/databaseService.js';

config();

class DiscoreBot {
  constructor() {
    this.client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.GuildPresences
      ]
    });

    this.analysisService = new AnalysisService();
    this.databaseService = new DatabaseService();
    this.commands = new Collection();
    
    this.setupEventListeners();
  }

  setupEventListeners() {
    this.client.once(Events.ClientReady, this.onReady.bind(this));
    this.client.on(Events.GuildCreate, this.onGuildJoin.bind(this));
    this.client.on(Events.MessageCreate, this.onMessage.bind(this));
    this.client.on(Events.InteractionCreate, this.onInteraction.bind(this));
    this.client.on(Events.GuildMemberAdd, this.onMemberJoin.bind(this));
    this.client.on(Events.MessageReactionAdd, this.onReactionAdd.bind(this));
  }

  async onReady(readyClient) {
    console.log(`‚úÖ Discore Bot –≥–æ—Ç–æ–≤! –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ ${readyClient.user.tag}`);
    console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${readyClient.guilds.cache.size} —Å–µ—Ä–≤–µ—Ä–æ–≤`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    this.client.user.setActivity('AI –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ | /analyze', { 
      type: 'WATCHING' 
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ë–î
    await this.syncGuildsWithDatabase();
  }

  async onGuildJoin(guild) {
    console.log(`üéâ –î–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: ${guild.name} (${guild.id})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –ë–î
    await this.databaseService.addGuild({
      guildId: guild.id,
      name: guild.name,
      memberCount: guild.memberCount,
      joinedAt: new Date(),
      ownerId: guild.ownerId
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const channel = guild.systemChannel || guild.channels.cache
      .filter(c => c.isTextBased() && c.permissionsFor(guild.members.me).has('SendMessages'))
      .first();

    if (channel) {
      await channel.send({
        embeds: [{
          title: 'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Discore!',
          description: `–ü—Ä–∏–≤–µ—Ç! –Ø Discore - AI-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.
          
          **–ß—Ç–æ —è —É–º–µ—é:**
          ‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          ‚Ä¢ üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π  
          ‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          ‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥—ã
          
          **–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:** \`/analyze setup\``,
          color: 0x5865F2,
          footer: { text: 'Discore AI ‚Ä¢ discore.com' }
        }]
      });
    }
  }

  async onMessage(message) {
    if (message.author.bot) return;
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const messageData = {
      guildId: message.guild?.id,
      channelId: message.channel.id,
      userId: message.author.id,
      content: message.content,
      timestamp: message.createdAt,
      hasAttachments: message.attachments.size > 0,
      replyToId: message.reference?.messageId,
      mentions: message.mentions.users.size
    };

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.processMessage(messageData).catch(console.error);
  }

  async processMessage(messageData) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.databaseService.saveMessage(messageData);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini
    const analysis = await this.analysisService.analyzeMessage(messageData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.databaseService.updateUserMetrics(messageData.userId, analysis);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await this.databaseService.updateGuildMetrics(messageData.guildId, analysis);
  }

  async onInteraction(interaction) {
    if (!interaction.isChatInputCommand()) return;

    const command = this.commands.get(interaction.commandName);
    if (!command) return;

    try {
      await command.execute(interaction);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      
      const errorResponse = {
        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.',
        ephemeral: true
      };

      if (interaction.replied || interaction.deferred) {
        await interaction.followUp(errorResponse);
      } else {
        await interaction.reply(errorResponse);
      }
    }
  }

  async onMemberJoin(member) {
    await this.databaseService.addUser({
      userId: member.id,
      guildId: member.guild.id,
      username: member.user.username,
      joinedAt: member.joinedAt
    });
  }

  async onReactionAdd(reaction, user) {
    if (user.bot) return;
    
    await this.databaseService.saveReaction({
      userId: user.id,
      guildId: reaction.message.guild?.id,
      messageId: reaction.message.id,
      emoji: reaction.emoji.name,
      timestamp: new Date()
    });
  }

  async syncGuildsWithDatabase() {
    for (const guild of this.client.guilds.cache.values()) {
      await this.databaseService.addGuild({
        guildId: guild.id,
        name: guild.name,
        memberCount: guild.memberCount,
        ownerId: guild.ownerId
      });
    }
  }

  async start() {
    try {
      await this.client.login(process.env.DISCORD_TOKEN);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }
}

export { DiscoreBot }; 