import express from 'express';
import cors from 'cors';
import { config } from 'dotenv';
import { DiscoreBot } from './bot/index.js';
import apiRoutes from './api/routes.js';
import { DatabaseService } from './services/databaseService.js';

config();

class DiscoreServer {
  constructor() {
    this.app = express();
    this.port = process.env.PORT || 3001;
    this.bot = new DiscoreBot();
    this.db = new DatabaseService();
    
    this.setupMiddleware();
    this.setupRoutes();
  }

  setupMiddleware() {
    // CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    this.app.use(cors({
      origin: [
        'http://localhost:3000',
        'http://localhost:5173',
        'https://discore.com',
        'https://www.discore.com'
      ],
      credentials: true
    }));

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req, res, next) => {
      console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
      next();
    });

    // Rate limiting (–±–∞–∑–æ–≤—ã–π)
    const rateLimitMap = new Map();
    this.app.use('/api', (req, res, next) => {
      const ip = req.ip || req.connection.remoteAddress;
      const now = Date.now();
      const windowMs = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
      const maxRequests = 100;

      if (!rateLimitMap.has(ip)) {
        rateLimitMap.set(ip, { count: 1, resetTime: now + windowMs });
        return next();
      }

      const limit = rateLimitMap.get(ip);
      if (now > limit.resetTime) {
        limit.count = 1;
        limit.resetTime = now + windowMs;
        return next();
      }

      if (limit.count >= maxRequests) {
        return res.status(429).json({
          success: false,
          error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
      }

      limit.count++;
      next();
    });
  }

  setupRoutes() {
    // Health check
    this.app.get('/health', (req, res) => {
      res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        bot: this.bot.client.isReady() ? 'connected' : 'disconnected',
        version: process.env.npm_package_version || '1.0.0'
      });
    });

    // API routes
    this.app.use('/api', apiRoutes);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (WebSocket –±—É–¥–µ—Ç –ø–æ–∑–∂–µ)
    this.app.get('/api/live/stats', async (req, res) => {
      try {
        const liveStats = {
          guilds: this.bot.client.guilds.cache.size,
          users: this.bot.client.users.cache.size,
          uptime: process.uptime(),
          memoryUsage: process.memoryUsage(),
          timestamp: new Date().toISOString()
        };

        res.json({
          success: true,
          data: liveStats
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
      }
    });

    // Bot invite URL
    this.app.get('/api/bot/invite', (req, res) => {
      const permissions = [
        'ViewChannel',
        'SendMessages', 
        'ReadMessageHistory',
        'AddReactions',
        'UseSlashCommands',
        'ManageMessages'
      ].join('%20');

      const inviteUrl = `https://discord.com/api/oauth2/authorize?client_id=${process.env.DISCORD_CLIENT_ID}&permissions=274877906944&scope=bot%20applications.commands`;

      res.json({
        success: true,
        data: { inviteUrl }
      });
    });

    // 404 handler
    this.app.use('*', (req, res) => {
      res.status(404).json({
        success: false,
        error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    });

    // Error handler
    this.app.use((error, req, res, next) => {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    });
  }

  async start() {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
      await this.db.connect();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
      await this.bot.start();
      console.log('‚úÖ Discord –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
      this.app.listen(this.port, () => {
        console.log(`‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
        console.log(`üåê Health check: http://localhost:${this.port}/health`);
        console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: http://localhost:${this.port}/api`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const server = new DiscoreServer();
server.start().catch(console.error); 